{"version":3,"sources":["api/hooks.ts","ui/components/TaskActionGroup.tsx","ui/components/TaskList.tsx","ui/TaskScheduler.tsx","ui/ResourceAllocation.tsx","ui/TaskDetailInfo.tsx","logo.svg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MOCK_TASK_INFO_LIST","id","name","status","createdAt","Date","startedAt","undefined","pausedAt","terminatedAt","description","workingDir","commandLine","outputLogPath","TaskActionGroup","text","record","size","type","danger","ghost","renderButtonGroup","STATUS_COLOR","RUNNING","PENDING","TERMINATED","PAUSED","ERROR","TaskList","history","useHistory","taskInfoList","useState","setTaskInfoList","useEffect","useTaskInfoList","columns","title","dataIndex","key","render","onClick","push","color","toUpperCase","className","dataSource","rowKey","TaskScheduler","data","value","ResourceAllocation","TaskDetailInfo","taskId","useParams","Header","Layout","Content","Footer","Sider","routes","path","exact","header","content","App","routerMatch","useRouteMatch","siderCollapsed","setSiderCollapsed","style","minHeight","collapsible","collapsed","onCollapse","to","src","logo","alt","theme","defaultSelectedKeys","params","currentPage","mode","Item","icon","DesktopOutlined","map","route","index","children","margin","padding","textAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1cc4dc88.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport TaskInfo from \"../task/TaskInfo\";\n\nconst MOCK_TASK_INFO_LIST: TaskInfo[] = [\n    {\n        id: \"1\",\n        name: \"task 1\",\n\n        status: \"RUNNING\",\n\n        createdAt: new Date(\"2021-09-27\"),\n        startedAt: undefined,\n        pausedAt: undefined,\n        terminatedAt: undefined,\n\n        description: \"task 1 description\",\n\n        workingDir: \"task 1 workingDir\",\n        commandLine: \"task 1 commandLine\",\n        outputLogPath: \"task 1 outputLogPath\",\n    },\n    {\n        id: \"2\",\n        name: \"task 2\",\n\n        status: \"PENDING\",\n\n        createdAt: new Date(\"2021-09-27\"),\n        startedAt: undefined,\n        pausedAt: undefined,\n        terminatedAt: undefined,\n\n        description: \"task 2 description\",\n\n        workingDir: \"task 2 workingDir\",\n        commandLine: \"task 2 commandLine\",\n        outputLogPath: \"task 2 outputLogPath\",\n    },\n    {\n        id: \"3\",\n        name: \"task 3\",\n\n        status: \"TERMINATED\",\n\n        createdAt: new Date(\"2021-09-27\"),\n        startedAt: undefined,\n        pausedAt: undefined,\n        terminatedAt: undefined,\n\n        description: \"task 3 description\",\n\n        workingDir: \"task 3 workingDir\",\n        commandLine: \"task 3 commandLine\",\n        outputLogPath: \"task 3 outputLogPath\",\n    },\n    {\n        id: \"4\",\n        name: \"task 4\",\n\n        status: \"ERROR\",\n\n        createdAt: new Date(\"2021-09-27\"),\n        startedAt: undefined,\n        pausedAt: undefined,\n        terminatedAt: undefined,\n\n        description: \"task 4 description\",\n\n        workingDir: \"task 4 workingDir\",\n        commandLine: \"task 4 commandLine\",\n        outputLogPath: \"task 4 outputLogPath\",\n    },\n    {\n        id: \"5\",\n        name: \"task 5\",\n\n        status: \"PAUSED\",\n\n        createdAt: new Date(\"2021-09-27\"),\n        startedAt: undefined,\n        pausedAt: undefined,\n        terminatedAt: undefined,\n\n        description: \"task 5 description\",\n\n        workingDir: \"task 5 workingDir\",\n        commandLine: \"task 5 commandLine\",\n        outputLogPath: \"task 5 outputLogPath\",\n    },\n];\n\nexport function useTaskInfoList() {\n    const [taskInfoList, setTaskInfoList] = useState<TaskInfo[]>([]);\n\n    useEffect(() => {\n        setTaskInfoList(MOCK_TASK_INFO_LIST);\n    }, []);\n\n    return taskInfoList;\n}\n","import { ReactElement } from \"react\";\nimport { Space, Button } from \"antd\";\nimport TaskInfo, { TaskStatus } from \"../../task/TaskInfo\";\n\nexport function TaskActionGroup(text: string, record: TaskInfo) {\n    const renderButtonGroup = (status: TaskStatus): ReactElement => {\n        switch (status) {\n            case \"RUNNING\": {\n                return (\n                    <>\n                        <Button type=\"primary\">PAUSE</Button>\n                        <Button danger ghost>\n                            STOP\n                        </Button>\n                        <Button danger ghost>\n                            KILL\n                        </Button>\n                    </>\n                );\n            }\n            case \"PENDING\": {\n                return (\n                    <>\n                        <Button>RUN</Button>\n                        <Button danger ghost>\n                            REMOVE\n                        </Button>\n                    </>\n                );\n            }\n            case \"PAUSED\": {\n                return (\n                    <>\n                        <Button>RESUME</Button>\n                        <Button danger ghost>\n                            STOP\n                        </Button>\n                        <Button danger ghost>\n                            KILL\n                        </Button>\n                    </>\n                );\n            }\n            case \"ERROR\":\n            case \"TERMINATED\": {\n                return (\n                    <>\n                        <Button danger ghost>\n                            REMOVE\n                        </Button>\n                    </>\n                );\n            }\n            default:\n                return <></>;\n        }\n    };\n    return <Space size=\"middle\">{renderButtonGroup(record.status)}</Space>;\n}\n","import { Table, Tag, Button } from \"antd\";\nimport { TaskStatus } from \"../../task/TaskInfo\";\nimport { useTaskInfoList } from \"../../api/hooks\";\nimport { TaskActionGroup } from \"./TaskActionGroup\";\nimport { useHistory } from \"react-router\";\n\nconst STATUS_COLOR: Record<\n    TaskStatus,\n    | \"green\"\n    | \"geekblue\"\n    | \"volcano\"\n    | \"pink\"\n    | \"red\"\n    | \"yellow\"\n    | \"orange\"\n    | \"cyan\"\n    | \"blue\"\n    | \"purple\"\n    | \"magenta\"\n    | \"gold\"\n    | \"lime\"\n    | \"success\"\n    | \"processing\"\n    | \"error\"\n    | \"default\"\n    | \"warning\"\n> = {\n    RUNNING: \"green\",\n    PENDING: \"geekblue\",\n    TERMINATED: \"volcano\",\n    PAUSED: \"yellow\",\n    ERROR: \"error\",\n};\n\nfunction TaskList() {\n    const history = useHistory();\n    const taskInfoList = useTaskInfoList();\n\n    const columns = [\n        {\n            title: \"ID\",\n            dataIndex: \"id\",\n            key: \"id\",\n            render: (id: string) => (\n                <Button\n                    onClick={() => history.push(`/task-scheduler/detail/${id}`)}\n                    type=\"link\"\n                >\n                    {id}\n                </Button>\n            ),\n        },\n        {\n            title: \"Name\",\n            dataIndex: \"name\",\n            key: \"name\",\n            render: (text: string) => <span>{text}</span>,\n        },\n        {\n            title: \"Command Line\",\n            dataIndex: \"commandLine\",\n            key: \"commandLine\",\n        },\n        {\n            title: \"Status\",\n            key: \"status\",\n            dataIndex: \"status\",\n            render: (status: TaskStatus) => (\n                <Tag color={STATUS_COLOR[status]}>{status.toUpperCase()}</Tag>\n            ),\n        },\n        {\n            title: \"Action\",\n            key: \"action\",\n            render: TaskActionGroup,\n        },\n        {\n            title: \"Description\",\n            key: \"description\",\n            dataIndex: \"description\",\n        },\n    ];\n\n    return (\n        <div className=\"TaskList\">\n            <Table columns={columns} dataSource={taskInfoList} rowKey=\"id\" />\n        </div>\n    );\n}\n\nexport default TaskList;\n","import TaskList from \"./components/TaskList\";\n\nfunction TaskScheduler() {\n    return <TaskList></TaskList>;\n}\n\nexport default TaskScheduler;\n","import { Table } from \"antd\";\nimport Resource from \"../task/Resource\";\n\nconst columns = [\n    {\n        title: \"Name\",\n        dataIndex: \"name\",\n        key: \"name\",\n    },\n    {\n        title: \"Value\",\n        dataIndex: \"value\",\n        key: \"value\",\n    },\n    {\n        title: \"Description\",\n        dataIndex: \"description\",\n        key: \"description\",\n    },\n];\n\nconst data: Resource[] = [\n    {\n        name: \"gpu 0\",\n        value: 1,\n        description: \"gpu 0\",\n    },\n];\n\nfunction ResourceAllocation() {\n    return (\n        <div className=\"TaskList\">\n            <Table columns={columns} dataSource={data} rowKey=\"id\" />\n        </div>\n    );\n}\n\nexport default ResourceAllocation;\n","import { useParams } from \"react-router\";\n\nfunction TaskDetailInfo() {\n    const { id: taskId } = useParams<{ id: string }>();\n    return (\n        <>\n            <p>Task ID: {taskId}</p>\n            <p></p>\n            <p></p>\n        </>\n    );\n}\n\nexport default TaskDetailInfo;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useState } from \"react\";\nimport { Switch, Route, Link, useRouteMatch } from \"react-router-dom\";\n\nimport { Layout, Menu } from \"antd\";\nimport { DesktopOutlined } from \"@ant-design/icons\";\n\nimport TaskScheduler from \"./ui/TaskScheduler\";\nimport ResourceAllocation from \"./ui/ResourceAllocation\";\nimport TaskDetailInfo from \"./ui/TaskDetailInfo\";\n\nimport logo from \"./logo.svg\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\n\nconst { Header, Content, Footer, Sider } = Layout;\n\nconst routes = [\n    {\n        path: \"/\",\n        exact: true,\n        header: () => <h2>Home</h2>,\n        content: () => <h2>Home</h2>,\n    },\n    {\n        path: \"/task-scheduler\",\n        exact: true,\n        header: () => <h2>Task Scheduler</h2>,\n        content: () => <TaskScheduler />,\n    },\n    {\n        path: \"/task-scheduler/detail/:id\",\n        exact: true,\n        header: () => <h2>Task Detail</h2>,\n        content: () => <TaskDetailInfo />,\n    },\n    {\n        path: \"/resource-allocation\",\n        header: () => <h2>Resource Allocation</h2>,\n        content: () => <ResourceAllocation />,\n    },\n];\n\nfunction App() {\n    const routerMatch = useRouteMatch<{ currentPage: string }>(\"/:currentPage\");\n    const [siderCollapsed, setSiderCollapsed] = useState<boolean>(false);\n\n    return (\n        <div className=\"App\">\n            <Layout style={{ minHeight: \"100vh\" }}>\n                <Sider\n                    collapsible\n                    collapsed={siderCollapsed}\n                    onCollapse={setSiderCollapsed}\n                >\n                    <Link to=\"/\">\n                        <div className=\"App-logo\">\n                            <img\n                                src={logo}\n                                className=\"App-logo-icon\"\n                                alt=\"logo\"\n                            />\n                            {siderCollapsed ? \"\" : <span>QTask</span>}\n                        </div>\n                    </Link>\n                    <Menu\n                        theme=\"dark\"\n                        defaultSelectedKeys={[routerMatch!.params.currentPage]}\n                        mode=\"inline\"\n                    >\n                        <Menu.Item\n                            key=\"task-scheduler\"\n                            icon={<DesktopOutlined />}\n                        >\n                            <Link to=\"/task-scheduler\">Task Scheduler</Link>\n                        </Menu.Item>\n                        <Menu.Item\n                            key=\"resource-allocation\"\n                            icon={<DesktopOutlined />}\n                        >\n                            <Link to=\"/resource-allocation\">\n                                Resource Allocation\n                            </Link>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n                <Layout className=\"site-layout\">\n                    <Header className=\"site-layout-background\">\n                        <Switch>\n                            {routes.map((route, index) => (\n                                <Route\n                                    key={index}\n                                    path={route.path}\n                                    exact={route.exact}\n                                    children={<route.header />}\n                                />\n                            ))}\n                        </Switch>\n                    </Header>\n                    <Content style={{ margin: \"16px 16px\" }}>\n                        <div\n                            className=\"site-layout-background\"\n                            style={{ padding: 24, minHeight: 360 }}\n                        >\n                            <Switch>\n                                {routes.map((route, index) => (\n                                    <Route\n                                        key={index}\n                                        path={route.path}\n                                        exact={route.exact}\n                                        children={<route.content />}\n                                    />\n                                ))}\n                            </Switch>\n                        </div>\n                    </Content>\n                    <Footer style={{ textAlign: \"center\" }}>\n                        QTask ©2021 Created by Bin Tsang\n                    </Footer>\n                </Layout>\n            </Layout>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { HashRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router>\n            <App />\n        </Router>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}